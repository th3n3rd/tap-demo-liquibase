#! copied from the convention-template provided out-of-the-box in TAP 1.6.1
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: enhanced-convention-template
spec:
  configPath: .status.template
  healthRule:
    singleConditionType: Ready
  lifecycle: mutable
  params:
  - default: default
    name: serviceAccount
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def build_fixed_annotations():
    #@   fixed_annotations = { "developer.conventions/target-containers": "workload" }
    #@   if param("debug"):
    #@     fixed_annotations["apps.tanzu.vmware.com/debug"] = param("debug")
    #@   end
    #@   if param("live-update"):
    #@     fixed_annotations["apps.tanzu.vmware.com/live-update"] = param("live-update")
    #@   end
    #@   return fixed_annotations
    #@ end

    #@ def merge_annotations(fixed_values):
    #@   annotations = {}
    #@   if hasattr(data.values.workload.metadata, "annotations"):
    #@     # DEPRECATED: remove in a future release
    #@     annotations.update(data.values.workload.metadata.annotations)
    #@   end
    #@   if type(param("annotations")) == "dict" or type(param("annotations")) == "struct":
    #@     annotations.update(param("annotations"))
    #@   end
    #@   annotations.update(fixed_values)
    #@   return annotations
    #@ end

    apiVersion: conventions.carto.run/v1alpha1
    kind: PodIntent
    metadata:
      name: #@ data.values.workload.metadata.name
      labels: #@ merge_labels({ "app.kubernetes.io/component": "intent" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      template:
        metadata:
          annotations: #@ merge_annotations(build_fixed_annotations())
          labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          serviceAccountName: #@ data.values.params.serviceAccount
          #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "apps.tanzu.vmware.com/has-db-migrations") and data.values.workload.metadata.labels["apps.tanzu.vmware.com/has-db-migrations"] == "true":
          initContainers:
            - name: db-migrations
              image: liquibase/liquibase@sha256:402dd9d122a0ce1b5d6e165492c5d45d06694dc5be64c0d36fdb219f783d7551
              command: ["/bin/sh", "-c"]
              args:
              - |
                set -e
                cd `mktemp -d`
                cp /liquibase-config/* .
                echo "changeLogFile: ./db.changelog-master.yaml" >> ./liquibase.properties
                echo "username: $(cat /bindings/db/username)" >> ./liquibase.properties
                echo "password: $(cat /bindings/db/password)" >> ./liquibase.properties
                echo "url: jdbc:$(cat /bindings/db/type)://$(cat /bindings/db/host):$(cat /bindings/db/port)/$(cat /bindings/db/database)" >> ./liquibase.properties
                liquibase update --defaultsFile=$(pwd)/liquibase.properties
              volumeMounts:
                - name: liquibase-config
                  mountPath: /liquibase-config
                  readOnly: true
          volumes:
            - name: liquibase-config
              configMap:
                name: #@ data.values.workload.metadata.name + "-liquibase-config"
          #@ end
          containers:
            - name: workload
              image: #@ data.values.image
              securityContext:
                runAsUser: 1000
              #@ if hasattr(data.values.workload.spec, "env"):
              env:
                #@ for var in data.values.workload.spec.env:
                - name: #@ var.name
                  #@ if/end hasattr(var, "value"):
                  value: #@ var.value
                  #@ if/end hasattr(var, "valueFrom"):
                  valueFrom: #@ var.valueFrom
                #@ end
              #@ end
              #@ if/end hasattr(data.values.workload.spec, "resources"):
              resources: #@ data.values.workload.spec["resources"]
