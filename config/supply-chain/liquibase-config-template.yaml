apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: liquibase-config-template
spec:
  configPath: '.data'
  healthRule:
    alwaysHealthy: {}
  lifecycle: mutable
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:base64", "base64")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:struct", "struct")
    
    #@ db_migrations_data = yaml.decode(base64.decode(data.values.configs.db_migrations.config))
    
    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def merge_annotations(fixed_values):
    #@   annotations = {}
    #@   if hasattr(data.values.workload.metadata, "annotations"):
    #@     # DEPRECATED: remove in a future release
    #@     annotations.update(data.values.workload.metadata.annotations)
    #@   end
    #@   if type(param("annotations")) == "dict" or type(param("annotations")) == "struct":
    #@     annotations.update(param("annotations"))
    #@   end
    #@   annotations.update(fixed_values)
    #@   return annotations
    #@ end
    
    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end
    
    #@ def db_migrations():
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name + "-liquibase-config"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "db-migrations", "carto.run/workload-name": data.values.workload.metadata.name })
      annotations:
        kapp.k14s.io/versioned: ""
        kapp.k14s.io/num-versions: "2"
        kapp.k14s.io/versioned-keep-original: ""
    data: #@ db_migrations_data
    #@ for service_claim in data.values.workload.spec.serviceClaims:
    #@ if service_claim.name == param("db_migrations_service_claim_name"):
    ---
    apiVersion: servicebinding.io/v1alpha3
    kind: ServiceBinding
    metadata:
      name: #@ data.values.workload.metadata.name + "-liquibase-runner-" + service_claim.name
      annotations: #@ merge_annotations({"kapp.k14s.io/change-group": "servicebinding.io/ServiceBindings"})
      labels: #@ merge_labels({ "app.kubernetes.io/component": "db-migrations", "carto.run/workload-name": data.values.workload.metadata.name })
    spec:
      name: #@ service_claim.name
      service: #@ service_claim.ref
      workload:
        apiVersion: batch/v1
        kind: Job
        name: #@ data.values.workload.metadata.name + "-liquibase-runner"
    #@ end
    #@ end
    ---
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: #@ data.values.workload.metadata.name + "-liquibase-runner"
      annotations:
        kapp.k14s.io/change-group: #@ "db-migrations/" + data.values.workload.metadata.name
        kapp.k14s.io/change-rule.0: "upsert after upserting servicebinding.io/ServiceBindings"
        kapp.k14s.io/change-rule.1: #@ "upsert before upserting workload/" + data.values.workload.metadata.name
        kapp.k14s.io/update-strategy: "always-replace"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "db-migrations", "carto.run/workload-name": data.values.workload.metadata.name })
    spec:
      template:
        metadata:
          labels: #@ merge_labels({ "app.kubernetes.io/component": "db-migrations", "carto.run/workload-name": data.values.workload.metadata.name })
        spec:
          containers:
          - name: db-migrations
            image: liquibase/liquibase@sha256:402dd9d122a0ce1b5d6e165492c5d45d06694dc5be64c0d36fdb219f783d7551
            command: ["/bin/sh", "-c"]
            #@yaml/text-templated-strings
            args:
            - |
              set -e
              cd `mktemp -d`
              cp /liquibase-config/* .
              SERVICE_CLAIM="(@= param("db_migrations_service_claim_name") @)"
              echo "changeLogFile: ./db.changelog-master.yaml" >> ./liquibase.properties
              echo "username: $(cat /bindings/$SERVICE_CLAIM/username)" >> ./liquibase.properties
              echo "password: $(cat /bindings/$SERVICE_CLAIM/password)" >> ./liquibase.properties
              echo "url: jdbc:$(cat /bindings/$SERVICE_CLAIM/type)://$(cat /bindings/$SERVICE_CLAIM/host):$(cat /bindings/$SERVICE_CLAIM/port)/$(cat /bindings/$SERVICE_CLAIM/database)" >> ./liquibase.properties
              liquibase update --defaultsFile=$(pwd)/liquibase.properties
            volumeMounts:
              - name: liquibase-config
                mountPath: /liquibase-config
                readOnly: true
          volumes:
            - name: liquibase-config
              configMap:
                name: #@ data.values.workload.metadata.name + "-liquibase-config"
          restartPolicy: Never
      backoffLimit: 2
    #@ end
    
    #@ def add_liquibase_config():
    #@ if hasattr(data.values.workload.metadata, "labels") and hasattr(data.values.workload.metadata.labels, "apps.tanzu.vmware.com/has-db-migrations") and data.values.workload.metadata.labels["apps.tanzu.vmware.com/has-db-migrations"] == "true":
    #@    new_data = struct.decode(data.values.configs.app_def.config)
    #@    new_data.update({"db-migrations.yml": yaml.encode(db_migrations())})
    #@    return new_data
    #@ else:
    #@    return struct.decode(data.values.configs.app_def.config)
    #@ end
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name + "-with-liquibase-config"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "liquibase-config" })
    #@yaml/text-templated-strings
    data: #@ add_liquibase_config()

